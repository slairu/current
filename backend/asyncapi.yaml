asyncapi: 2.6.0
info:
  title: Current Messaging
  version: 1.0.0
  description: Messaging websocket api for Current
servers:
  development:
    url: ws://localhost:4200
    protocol: ws
    description: Development server
channels:
  /:
    publish:
      summary: Send message related data to the server. Use the x-ack property to listen for a response.
      message:
        oneOf:
          - $ref: "#/components/messages/GetMessages"
          - $ref: "#/components/messages/SendMessage"
          - $ref: "#/components/messages/EditMessage"
          - $ref: "#/components/messages/ReactToMessage"
          - $ref: "#/components/messages/DeleteMessage"
          - $ref: "#/components/messages/ReadMessages"
          - $ref: "#/components/messages/GetGroups"
          - $ref: "#/components/messages/CreateGroup"
          - $ref: "#/components/messages/GetGroupUsers"
          - $ref: "#/components/messages/AddToGroup"
          - $ref: "#/components/messages/RemoveFromGroup"
          - $ref: "#/components/messages/LeaveGroup"
    subscribe:
      summary: Listen for message related data from the server
      message:
        oneOf:
          - $ref: "#/components/messages/ReceiveMessage"
          - $ref: "#/components/messages/ReceiveMessageEdit"
          - $ref: "#/components/messages/ReceiveMessageReact"
          - $ref: "#/components/messages/ReceiveMessageDelete"
          - $ref: "#/components/messages/ReceiveReadMessages"
          - $ref: "#/components/messages/ReceiveGroupInvite"
          - $ref: "#/components/messages/ReceiveGroupRemoval"
components:
  messages:
    GetMessages:
      messageId: getMessages
      name: getMessages
      summary: Get past messages in a group. Use idKey and limit for pagination.
      contentType: application/json
      payload:
        type: object
        description: Get messages for a group
        required:
          - groupId
          - limit
        properties:
          groupId:
            $ref: "#/components/schemas/MongoId"
          curMessageId:
            $ref: "#/components/schemas/MongoId"
          limit:
            type: integer
            minimum: 1
      x-ack:
        args:
          oneOf:
            - type: object
              required:
                - messages
              properties:
                messages:
                  type: array
                  items:
                    $ref: "#/components/schemas/MessagePayload"
            - $ref: "#/components/schemas/ErrorPayload"
    SendMessage:
      messageId: sendMessage
      name: sendMessage
      contentType: application/json
      payload:
        type: object
        required:
          - message
        properties:
          parentMessageId:
            $ref: "#/components/schemas/MongoId"
          message:
            $ref: "#/components/schemas/SimpleMessagePayload"
      x-ack:
        args:
          oneOf:
            - type: object # empty ack object
            - $ref: "#/components/schemas/ErrorPayload"
    EditMessage:
      messageId: editMessage
      name: editMessage
      contentType: application/json
      payload:
        type: object
        required:
          - messageId
          - content
        properties:
          messageId:
            $ref: "#/components/schemas/MongoId"
          content:
            type: string
            maxLength: 1000
          mentions:
            type: array
            items:
              $ref: "#/components/schemas/MongoId"
      x-ack:
        args:
          oneOf:
            - $ref: "#/components/schemas/MessagePayload"
            - $ref: "#/components/schemas/ErrorPayload"
    ReactToMessage:
      messageId: reactToMessage
      name: reactToMessage
      contentType: application/json
      payload:
        type: object
        required:
          - messageId
          - reaction
        properties:
          messageId:
            $ref: "#/components/schemas/MongoId"
          reaction:
            type: string
            # TODO: add emoji validation (regex or enum)
      x-ack:
        args:
          oneOf:
            - type: object # empty ack object
            - $ref: "#/components/schemas/ErrorPayload"
    DeleteMessage:
      messageId: deleteMessage
      name: deleteMessage
      contentType: application/json
      payload:
        type: object
        required:
          - messageId
        properties:
          messageId:
            $ref: "#/components/schemas/MongoId"
      x-ack:
        args:
          oneOf:
            - type: object # empty ack object
            - $ref: "#/components/schemas/ErrorPayload"
    ReadMessages:
      messageId: readMessages
      name: readMessages
      contentType: application/json
      payload:
        type: object
        required:
          - groupId
        properties:
          groupId:
            $ref: "#/components/schemas/MongoId"
      x-ack:
        args:
          oneOf:
            - type: object # empty ack object
            - $ref: "#/components/schemas/ErrorPayload"
    GetGroups:
      messageId: getGroups
      name: getGroups
      summary: Get all groups that the signed in account is a part of
      contentType: application/json
      x-ack:
        args:
          oneOf:
            - type: object
              required:
                - groups
              properties:
                groups:
                  type: array
                  items:
                    $ref: "#/components/schemas/SimpleGroup"
            - $ref: "#/components/schemas/ErrorPayload"
    CreateGroup:
      messageId: createGroup
      name: createGroup
      summary: Create a new group.
      contentType: application/json
      payload:
        type: object
        required:
          - groupDetails
          - accounts
        properties:
          groupDetails:
            $ref: "#/components/schemas/SimpleGroup"
          accounts:
            description: Other accounts to add to group dm. Logged-in account is automatically added and given admin role.
            type: array
            items:
              $ref: "#/components/schemas/MongoId"
      x-ack:
        args:
          oneOf:
            - $ref: "#/components/schemas/Group"
            - $ref: "#/components/schemas/ErrorPayload"
    GetGroupUsers:
      messageId: getGroupUsers
      name: getGroupUsers
      summary: Get all users in a group.
      contentType: application/json
      payload:
        type: object
        required:
          - groupId
        properties:
          groupId:
            $ref: "#/components/schemas/MongoId"
      x-ack:
        args:
          oneOf:
            - type: object
              required:
                - users
              properties:
                users:
                  type: array
                  items:
                    allOf:
                      - $ref: "#/components/schemas/SimpleUser"
                      - type: object
                        properties:
                          roles:
                            $ref: "#/components/schemas/GroupRoles"
            - $ref: "#/components/schemas/ErrorPayload"
    AddToGroup:
      messageId: addToGroup
      name: addToGroup
      summary: Add a user to a group.
      contentType: application/json
      payload:
        type: object
        required:
          - groupId
          - userId
        properties:
          groupId:
            $ref: "#/components/schemas/MongoId"
          userId:
            $ref: "#/components/schemas/MongoId"
      x-ack:
        args:
          oneOf:
            - type: object # empty ack object
            - $ref: "#/components/schemas/ErrorPayload"
    RemoveFromGroup:
      messageId: removeFromGroup
      name: removeFromGroup
      summary: Remove a user from a group.
      contentType: application/json
      payload:
        type: object
        required:
          - groupId
          - userId
        properties:
          groupId:
            $ref: "#/components/schemas/MongoId"
          userId:
            $ref: "#/components/schemas/MongoId"
      x-ack:
        args:
          oneOf:
            - type: object # empty ack object
            - $ref: "#/components/schemas/ErrorPayload"
    LeaveGroup:
      messageId: leaveGroup
      name: leaveGroup
      summary: Leave a group.
      contentType: application/json
      payload:
        type: object
        required:
          - groupId
        properties:
          groupId:
            $ref: "#/components/schemas/MongoId"
      x-ack:
        args:
          oneOf:
            - type: object # empty ack object
            - $ref: "#/components/schemas/ErrorPayload"
    ReceiveMessage:
      messageId: receiveMessage
      name: receiveMessage
      contentType: application/json
      payload:
        $ref: "#/components/schemas/MessagePayload"
    ReceiveMessageEdit:
      messageId: receiveMessageEdit
      name: receiveMessageEdit
      contentType: application/json
      payload:
        $ref: "#/components/schemas/MessagePayload"
    ReceiveMessageReact:
      messageId: receiveMessageReact
      name: receiveMessageReact
      contentType: application/json
      payload:
        $ref: "#/components/schemas/MessagePayload"
    ReceiveMessageDelete:
      messageId: receiveMessageDelete
      name: receiveMessageDelete
      contentType: application/json
      payload:
        type: object
        required:
          - messageId
        properties:
          messageId:
            $ref: "#/components/schemas/MongoId"
    ReceiveReadMessages:
      messageId: receiveReadMessages
      name: receiveReadMessages
      contentType: application/json
      payload:
        type: object
        required:
          - message
          - readBy
        properties:
          message:
            $ref: "#/components/schemas/SimpleMessagePayload"
          readBy:
            $ref: "#/components/schemas/SimpleUser"
    ReceiveGroupInvite:
      messageId: receiveGroupInvite
      name: receiveGroupInvite
      contentType: application/json
      payload:
        type: object
        required:
          - group
          - user
        properties:
          group:
            $ref: "#/components/schemas/SimpleGroup"
          user:
            $ref: "#/components/schemas/SimpleUser"
    ReceiveGroupRemoval:
      messageId: receiveGroupRemoval
      name: receiveGroupRemoval
      contentType: application/json
      payload:
        type: object
        required:
          - group
          - user
        properties:
          group:
            $ref: "#/components/schemas/SimpleGroup"
          user:
            $ref: "#/components/schemas/SimpleUser"
  schemas:
    MessagePayload:
      allOf:
        - $ref: "#/components/schemas/SimpleMessagePayload"
        - type: object
          properties:
            parentMessage:
              $ref: "#/components/schemas/SimpleMessagePayload"
    SimpleMessagePayload:
      type: object
      required:
        - groupId
        - sender
        - content
        - createdAt
      properties:
        groupId:
          $ref: "#/components/schemas/MongoId"
        sender:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/SimpleUser"
        content:
          type: string
          maxLength: 1000
        mentions:
          type: array
          items:
            $ref: "#/components/schemas/SimpleUser"
        attachment:
          type: string
          format: uri
        reactions:
          readOnly: true
          allOf:
            - type: array
              items:
                type: object
                required:
                  - emoji
                  - users
                properties:
                  emoji:
                    type: string
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/SimpleUser"
        createdAt:
          readOnly: true
          allOf:
            - type: string
              format: date-time
        updatedAt:
          readOnly: true
          allOf:
            - type: string
              format: date-time
    User:
      allOf:
        - $ref: "#/components/schemas/SimpleUser"
        - type: object
          required:
            - groups
          properties:
            groups:
              type: array
              items:
                type: object
                required:
                  - group
                  - roles
                  - lastReadMessage
                properties:
                  group:
                    $ref: "#/components/schemas/SimpleGroup"
                  roles:
                    $ref: "#/components/schemas/GroupRoles"
                  lastReadMessage:
                    $ref: "#/components/schemas/SimpleMessagePayload"
    Group:
      allOf:
        - $ref: "#/components/schemas/SimpleGroup"
        - type: object
          required:
            - users
          properties:
            users:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/SimpleUser"
                  - type: object
                    required:
                      - roles
                    properties:
                      roles:
                        $ref: "#/components/schemas/GroupRoles"
    SimpleUser:
      type: object
      required:
        - _id
        - username
        - email
        - profilePicture
      properties:
        _id:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/MongoId"
        username:
          type: string
          maxLength: 100
        email:
          type: string
          maxLength: 100
        profilePicture:
          type: string
          format: uri
        phoneNumber:
          type: string
        bio:
          type: string
          maxLength: 300
    SimpleGroup:
      type: object
      required:
        - _id
        - name
        - description
      properties:
        _id:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/MongoId"
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 300
    ErrorPayload:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/CommonError"
              - oneOf:
                  - $ref: "#/components/schemas/ValidationError"
                  - $ref: "#/components/schemas/BusinessError"
                  - $ref: "#/components/schemas/ServerError"
    GroupRoles:
      type: array
      items:
        type: string
        enum:
          - admin
          - member
    MongoId:
      type: string
      # some format?
    CommonError:
      type: object
      required:
        - errorType
        - event
        - message
        - detail
      properties:
        errorType:
          type: string
          enum:
            - validation
            - business
            - server
        event:
          type: string
        message:
          type: string
        detail:
          type: string
    ValidationError:
      type: object
      required:
        - path
      properties:
        errorType:
          type: string
          const: "validation"
        path:
          type: string
    BusinessError:
      type: object
      properties:
        errorType:
          type: string
          const: "business"
    ServerError:
      type: object
      properties:
        errorType:
          type: string
          const: "server"
